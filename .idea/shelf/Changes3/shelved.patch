Index: elide/elide/tests/util.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport shutil\nimport sys\nfrom functools import partial\nfrom tempfile import mkdtemp\n\nfrom blinker import Signal\nfrom kivy.base import EventLoop\nfrom kivy.config import ConfigParser\nfrom kivy.input.motionevent import MotionEvent\nfrom kivy.tests.common import GraphicUnitTest\n\nfrom elide.app import ElideApp\n\n\ndef all_spots_placed(board, char=None):\n\tif char is None:\n\t\tchar = board.character\n\tfor place in char.place:\n\t\tif place not in board.spot:\n\t\t\treturn False\n\treturn True\n\n\ndef all_pawns_placed(board, char=None):\n\tif char is None:\n\t\tchar = board.character\n\tfor thing in char.thing:\n\t\tif thing not in board.pawn:\n\t\t\treturn False\n\treturn True\n\n\ndef all_arrows_placed(board, char=None):\n\tif char is None:\n\t\tchar = board.character\n\tfor orig, dests in char.portal.items():\n\t\tif orig not in board.arrow:\n\t\t\treturn False\n\t\tarrows = board.arrow[orig]\n\t\tfor dest in dests:\n\t\t\tif dest not in arrows:\n\t\t\t\treturn False\n\treturn True\n\n\ndef board_is_arranged(board, char=None):\n\tif char is None:\n\t\tchar = board.character\n\treturn (\n\t\tall_spots_placed(board, char)\n\t\tand all_pawns_placed(board, char)\n\t\tand all_arrows_placed(board, char)\n\t)\n\n\ndef idle_until(condition=None, timeout=100, message=\"Timed out\"):\n\t\"\"\"Advance frames until ``condition()`` is true\n\n\tWith integer ``timeout``, give up after that many frames,\n\traising ``TimeoutError``. You can customize its ``message``.\n\n\t\"\"\"\n\tif not (timeout or condition):\n\t\traise ValueError(\"Need timeout or condition\")\n\tif condition is None:\n\t\treturn partial(idle_until, timeout=timeout, message=message)\n\tif timeout is None:\n\t\twhile not condition():\n\t\t\tEventLoop.idle()\n\t\treturn\n\tfor _ in range(timeout):\n\t\tif condition():\n\t\t\treturn\n\t\tEventLoop.idle()\n\traise TimeoutError(message)\n\n\nclass MockTouch(MotionEvent):\n\tdef depack(self, args):\n\t\tself.is_touch = True\n\t\tself.sx = args[\"sx\"]\n\t\tself.sy = args[\"sy\"]\n\t\tsuper().depack(args)\n\n\nclass ListenableDict(dict, Signal):\n\tdef __init__(self):\n\t\tSignal.__init__(self)\n\n\nclass MockTime(Signal):\n\tpass\n\n\nclass MockEngine(Signal):\n\teternal = ListenableDict()\n\tuniversal = ListenableDict()\n\tcharacter = ListenableDict()\n\tstring = ListenableDict()\n\ttime = MockTime()\n\tclosed = False\n\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself.turn = self.initial_turn = self.final_turn = 0\n\t\tself._ready = True\n\n\tdef __setattr__(self, key, value):\n\t\tif not hasattr(self, \"_ready\"):\n\t\t\tsuper().__setattr__(key, value)\n\t\t\treturn\n\t\tself.send(self, key=key, value=value)\n\t\tsuper().__setattr__(key, value)\n\n\tdef branch_start_turn(self, branch: str | None = None) -> int:\n\t\treturn self.initial_turn\n\n\tdef branch_end_turn(self, branch=None):\n\t\treturn self.final_turn\n\n\tdef next_turn(self, *args, **kwargs):\n\t\tself.turn += 1\n\t\tself.final_turn = self.turn\n\t\tkwargs[\"cb\"](\"next_turn\", \"trunk\", self.turn, 0, ([], {}))\n\n\tdef handle(self, *args, **kwargs):\n\t\treturn {\"trunk\": (None, 0, 1, 2, 3)}\n\n\tdef commit(self):\n\t\tpass\n\n\nclass ELiDEAppTest(GraphicUnitTest):\n\tgames_dir = \"games\"\n\tgame_name = \"test\"\n\tcharacter_name = \"physical\"\n\n\t@property\n\tdef engine_prefix(self):\n\t\treturn os.path.join(self.prefix, self.games_dir, self.game_name)\n\n\tdef __init__(self, methodName=\"runTest\"):\n\t\tsuper().__init__(methodName)\n\t\tself.prefix = mkdtemp()\n\t\tself.addCleanup(self.cleanup)\n\n\tdef cleanup(self):\n\t\tshutil.rmtree(self.prefix)\n\n\tdef setUp(self):\n\t\tsuper(ELiDEAppTest, self).setUp()\n\t\tos.makedirs(\n\t\t\tos.path.join(self.prefix, self.games_dir, self.game_name),\n\t\t\texist_ok=True,\n\t\t)\n\t\tif hasattr(self, \"install\"):\n\t\t\tfrom lisien import Engine\n\n\t\t\twith Engine(\n\t\t\t\tos.path.join(self.prefix, self.games_dir, self.game_name)\n\t\t\t) as eng:\n\t\t\t\tself.install(eng)\n\t\tself.app = ElideApp(\n\t\t\timmediate_start=True,\n\t\t\tprefix=self.prefix,\n\t\t\tgames_dir=self.games_dir,\n\t\t\tgame_name=self.game_name,\n\t\t\tcharacter_name=self.character_name,\n\t\t)\n\t\tself.app.leave_game = True\n\t\tself.app.config = ConfigParser(None)\n\t\tself.app.build_config(self.app.config)\n\n\tdef tearDown(self, fake=False):\n\t\tEventLoop.idle()\n\t\tsuper().tearDown(fake=fake)\n\t\tself.app.stop()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/elide/elide/tests/util.py b/elide/elide/tests/util.py
--- a/elide/elide/tests/util.py	(revision 452aa9dffb8c966141ea1e64cf049921b4b81420)
+++ b/elide/elide/tests/util.py	(date 1756341512896)
@@ -131,6 +131,13 @@
 		pass
 
 
+def advance_frames(frames: int) -> None:
+	from kivy.base import EventLoop
+
+	for _ in range(frames):
+		EventLoop.idle()
+
+
 class ELiDEAppTest(GraphicUnitTest):
 	games_dir = "games"
 	game_name = "test"
Index: elide/elide/tests/test_character_switcher.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from kivy.tests.common import UnitTestTouch\n\nfrom lisien.examples import polygons\n\nfrom .util import ELiDEAppTest, idle_until\n\n\nclass CharacterSwitcherTest(ELiDEAppTest):\n\tgame_name = \"polygons\"\n\tinstall = staticmethod(polygons.install)\n\n\tdef test_character_switcher(self):\n\t\tapp = self.app\n\t\tself.Window.add_widget(app.build())\n\t\tidle_until(\n\t\t\tlambda: app.manager.current == \"mainscreen\",\n\t\t\t100,\n\t\t\t\"Never switched to mainscreen\",\n\t\t)\n\t\tapp.mainscreen.populate()\n\t\tidle_until(\n\t\t\tlambda: app.mainscreen.boardview, 100, \"never got boardview\"\n\t\t)\n\t\tidle_until(\n\t\t\tlambda: app.mainscreen.boardview.board.spot, 100, \"never got spots\"\n\t\t)\n\t\tphysspots = len(app.mainscreen.boardview.board.spot)\n\t\tapp.mainscreen.charmenu.charmenu.toggle_chars_screen()\n\t\tidle_until(\n\t\t\tlambda: app.manager.current == \"chars\",\n\t\t\t100,\n\t\t\t\"Never switched to chars\",\n\t\t)\n\t\tboxl = app.chars.ids.charsview.ids.boxl\n\t\tidle_until(\n\t\t\tlambda: len(boxl.children) == 3,\n\t\t\t100,\n\t\t\t\"Didn't get all three characters\",\n\t\t)\n\t\tfor charb in boxl.children:\n\t\t\tif charb.text == \"triangle\":\n\t\t\t\ttouch = UnitTestTouch(*charb.center)\n\t\t\t\ttouch.pos = charb.center\n\t\t\t\tassert charb.dispatch(\"on_touch_down\", touch)\n\t\t\t\tself.advance_frames(5)\n\t\t\t\tcharb.dispatch(\"on_touch_up\", touch)\n\t\t\t\tidle_until(\n\t\t\t\t\tlambda: charb.state == \"down\",\n\t\t\t\t\t10,\n\t\t\t\t\t\"Button press did not work\",\n\t\t\t\t)\n\t\t\t\tbreak\n\t\telse:\n\t\t\tassert False, 'No button for \"triangle\" character'\n\t\tidle_until(\n\t\t\tlambda: app.chars.ids.charsview.character_name == \"triangle\",\n\t\t\t100,\n\t\t\t\"Never propagated character_name\",\n\t\t)\n\t\tapp.chars.toggle()\n\t\tidle_until(\n\t\t\tlambda: app.manager.current == \"mainscreen\",\n\t\t\t100,\n\t\t\t\"Didn't switch back to mainscreen\",\n\t\t)\n\t\tidle_until(\n\t\t\tlambda: not app.mainscreen.boardview.board.spot,\n\t\t\t100,\n\t\t\t\"Didn't clear out spots, {} left\".format(\n\t\t\t\tlen(app.mainscreen.boardview.board.spot)\n\t\t\t),\n\t\t)\n\t\tapp.mainscreen.charmenu.charmenu.toggle_chars_screen()\n\t\tidle_until(\n\t\t\tlambda: app.manager.current == \"chars\",\n\t\t\t100,\n\t\t\t\"Never switched to chars\",\n\t\t)\n\t\tfor charb in boxl.children:\n\t\t\tif charb.text == \"physical\":\n\t\t\t\ttouch = UnitTestTouch(*charb.center)\n\t\t\t\ttouch.pos = charb.center\n\t\t\t\tassert charb.dispatch(\"on_touch_down\", touch)\n\t\t\t\tself.advance_frames(5)\n\t\t\t\tcharb.dispatch(\"on_touch_up\", touch)\n\t\t\t\tidle_until(\n\t\t\t\t\tlambda: charb.state == \"down\",\n\t\t\t\t\t10,\n\t\t\t\t\t\"Button press did not work\",\n\t\t\t\t)\n\t\t\t\tbreak\n\t\telse:\n\t\t\tassert False, 'No button for \"physical\" character'\n\t\tidle_until(\n\t\t\tlambda: app.chars.ids.charsview.character_name == \"physical\",\n\t\t\t100,\n\t\t\t\"Never propagated character_name\",\n\t\t)\n\t\tapp.chars.toggle()\n\t\tidle_until(\n\t\t\tlambda: len(app.mainscreen.boardview.board.spot) == physspots,\n\t\t\t100,\n\t\t\t\"Never got physical back\",\n\t\t)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/elide/elide/tests/test_character_switcher.py b/elide/elide/tests/test_character_switcher.py
--- a/elide/elide/tests/test_character_switcher.py	(revision 452aa9dffb8c966141ea1e64cf049921b4b81420)
+++ b/elide/elide/tests/test_character_switcher.py	(date 1756341548237)
@@ -1,104 +1,108 @@
+import pytest
+
 from kivy.tests.common import UnitTestTouch
 
 from lisien.examples import polygons
+from lisien.engine import Engine
 
-from .util import ELiDEAppTest, idle_until
+from .util import advance_frames, idle_until
 
 
-class CharacterSwitcherTest(ELiDEAppTest):
-	game_name = "polygons"
-	install = staticmethod(polygons.install)
+@pytest.fixture(autouse=True)
+def polygons_sim(play_dir):
+	with Engine(play_dir, random_seed=0, workers=0) as eng:
+		polygons.install(eng)
 
-	def test_character_switcher(self):
-		app = self.app
-		self.Window.add_widget(app.build())
-		idle_until(
-			lambda: app.manager.current == "mainscreen",
-			100,
-			"Never switched to mainscreen",
-		)
-		app.mainscreen.populate()
-		idle_until(
-			lambda: app.mainscreen.boardview, 100, "never got boardview"
-		)
-		idle_until(
-			lambda: app.mainscreen.boardview.board.spot, 100, "never got spots"
-		)
-		physspots = len(app.mainscreen.boardview.board.spot)
-		app.mainscreen.charmenu.charmenu.toggle_chars_screen()
-		idle_until(
-			lambda: app.manager.current == "chars",
-			100,
-			"Never switched to chars",
-		)
-		boxl = app.chars.ids.charsview.ids.boxl
-		idle_until(
-			lambda: len(boxl.children) == 3,
-			100,
-			"Didn't get all three characters",
-		)
-		for charb in boxl.children:
-			if charb.text == "triangle":
-				touch = UnitTestTouch(*charb.center)
-				touch.pos = charb.center
-				assert charb.dispatch("on_touch_down", touch)
-				self.advance_frames(5)
-				charb.dispatch("on_touch_up", touch)
-				idle_until(
-					lambda: charb.state == "down",
-					10,
-					"Button press did not work",
-				)
-				break
-		else:
-			assert False, 'No button for "triangle" character'
-		idle_until(
-			lambda: app.chars.ids.charsview.character_name == "triangle",
-			100,
-			"Never propagated character_name",
-		)
-		app.chars.toggle()
-		idle_until(
-			lambda: app.manager.current == "mainscreen",
-			100,
-			"Didn't switch back to mainscreen",
-		)
-		idle_until(
-			lambda: not app.mainscreen.boardview.board.spot,
-			100,
-			"Didn't clear out spots, {} left".format(
-				len(app.mainscreen.boardview.board.spot)
-			),
-		)
-		app.mainscreen.charmenu.charmenu.toggle_chars_screen()
-		idle_until(
-			lambda: app.manager.current == "chars",
-			100,
-			"Never switched to chars",
-		)
-		for charb in boxl.children:
-			if charb.text == "physical":
-				touch = UnitTestTouch(*charb.center)
-				touch.pos = charb.center
-				assert charb.dispatch("on_touch_down", touch)
-				self.advance_frames(5)
-				charb.dispatch("on_touch_up", touch)
-				idle_until(
-					lambda: charb.state == "down",
-					10,
-					"Button press did not work",
-				)
-				break
-		else:
-			assert False, 'No button for "physical" character'
-		idle_until(
-			lambda: app.chars.ids.charsview.character_name == "physical",
-			100,
-			"Never propagated character_name",
-		)
-		app.chars.toggle()
-		idle_until(
-			lambda: len(app.mainscreen.boardview.board.spot) == physspots,
-			100,
-			"Never got physical back",
-		)
+def test_character_switcher(elide_app):
+	app = elide_app
+	idle_until(
+		lambda: app.manager.current == "mainscreen",
+		100,
+		"Never switched to mainscreen",
+	)
+	app.mainscreen.populate()
+	idle_until(
+		lambda: app.mainscreen.boardview, 100, "never got boardview"
+	)
+	idle_until(
+		lambda: app.mainscreen.boardview.board.spot, 100, "never got spots"
+	)
+	physspots = len(app.mainscreen.boardview.board.spot)
+	app.mainscreen.charmenu.charmenu.toggle_chars_screen()
+	idle_until(
+		lambda: app.manager.current == "chars",
+		100,
+		"Never switched to chars",
+	)
+	boxl = app.chars.ids.charsview.ids.boxl
+	idle_until(
+		lambda: len(boxl.children) == 3,
+		100,
+		"Didn't get all three characters",
+	)
+	for charb in boxl.children:
+		if charb.text == "triangle":
+			touch = UnitTestTouch(*charb.center)
+			touch.pos = charb.center
+			assert charb.dispatch("on_touch_down", touch)
+			advance_frames(5)
+			charb.dispatch("on_touch_up", touch)
+			idle_until(
+				lambda: charb.state == "down",
+				10,
+				"Button press did not work",
+			)
+			break
+	else:
+		assert False, 'No button for "triangle" character'
+	idle_until(
+		lambda: app.chars.ids.charsview.character_name == "triangle",
+		100,
+		"Never propagated character_name",
+	)
+	app.chars.toggle()
+	idle_until(
+		lambda: app.manager.current == "mainscreen",
+		100,
+		"Didn't switch back to mainscreen",
+	)
+	idle_until(
+		lambda: not app.mainscreen.boardview.board.spot,
+		100,
+		"Didn't clear out spots, {} left".format(
+			len(app.mainscreen.boardview.board.spot)
+		),
+	)
+	app.mainscreen.charmenu.charmenu.toggle_chars_screen()
+	idle_until(
+		lambda: app.manager.current == "chars",
+		100,
+		"Never switched to chars",
+	)
+
+	for charb in boxl.children:
+		if charb.text == "physical":
+			touch = UnitTestTouch(*charb.center)
+			touch.pos = charb.center
+			assert charb.dispatch("on_touch_down", touch)
+			advance_frames(5)
+			charb.dispatch("on_touch_up", touch)
+			idle_until(
+				lambda: charb.state == "down",
+				10,
+				"Button press did not work",
+			)
+			break
+	else:
+		assert False, 'No button for "physical" character'
+	idle_until(
+		lambda: app.chars.ids.charsview.character_name == "physical",
+		100,
+		"Never propagated character_name",
+	)
+	app.chars.toggle()
+	idle_until(
+		lambda: len(app.mainscreen.boardview.board.spot) == physspots,
+		100,
+		"Never got physical back",
+	)
Index: elide/elide/tests/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This file is part of Elide, frontend to Lisien, a framework for life simulation games.\n# Copyright (c) Zachary Spector, public@zacharyspector.com\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, version 3.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom kivy.tests import async_run\n\nfrom elide.app import ElideApp\n\npytest_plugins = [\"kivy.tests.conftest\", \"kivy.tests.fixtures\"]\n\n\n@async_run(app_cls_func=ElideApp)\ndef elide_app(kivy_app):\n\tyield kivy_app\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/elide/elide/tests/conftest.py b/elide/elide/tests/conftest.py
--- a/elide/elide/tests/conftest.py	(revision 452aa9dffb8c966141ea1e64cf049921b4b81420)
+++ b/elide/elide/tests/conftest.py	(date 1756341512896)
@@ -12,13 +12,83 @@
 #
 # You should have received a copy of the GNU Affero General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
-from kivy.tests import async_run
+import os
+
+import pytest
+from kivy.config import ConfigParser
+from kivy.base import EventLoop
+from kivy.core.window import Window
 
 from elide.app import ElideApp
 
-pytest_plugins = ["kivy.tests.conftest", "kivy.tests.fixtures"]
+
+@pytest.fixture
+def play_dir(tmp_path):
+	games_dir = "games"
+	game_name = "test"
+	play_dir = os.path.join(tmp_path, games_dir, game_name)
+	os.makedirs(
+		play_dir,
+		exist_ok=True,
+	)
+	yield play_dir
+
+
+@pytest.fixture(params=[69105])
+def random_seed(request):
+	yield request.param
+
+
+@pytest.fixture
+def elide_app(play_dir):
+	def clear_window_and_event_loop():
+		for child in Window.children[:]:
+			Window.remove_widget(child)
+		Window.canvas.before.clear()
+		Window.canvas.clear()
+		Window.canvas.after.clear()
+		EventLoop.touches.clear()
+		for post_proc in EventLoop.postproc_modules:
+			if hasattr(post_proc, 'touches'):
+				post_proc.touches.clear()
+			elif hasattr(post_proc, 'last_touches'):
+				post_proc.last_touches.clear()
+	game_name = os.path.basename(play_dir)
+	games_dir = os.path.basename(play_dir[:-len(game_name)-1])
+	prefix = play_dir[:-(len(games_dir) + len(game_name) + 1)]
+	character_name = "physical"
+
+	from os import environ
+	environ['KIVY_USE_DEFAULTCONFIG'] = '1'
+
+	# force window size + remove all inputs
+	from kivy.config import Config
+	Config.set('graphics', 'width', '320')
+	Config.set('graphics', 'height', '240')
+	for items in Config.items('input'):
+		Config.remove_option('input', items[0])
 
 
-@async_run(app_cls_func=ElideApp)
-def elide_app(kivy_app):
-	yield kivy_app
+	# ensure our window is correctly created
+	Window.create_window()
+	Window.register()
+	Window.initialized = True
+	Window.close = lambda *s: None
+	clear_window_and_event_loop()
+
+	app = ElideApp(
+		immediate_start=True,
+		prefix=prefix,
+		games_dir=games_dir,
+		game_name=game_name,
+		character_name=character_name,
+		workers=0,
+	)
+	app.leave_game = True
+	app.config = ConfigParser(None)
+	app.build_config(app.config)
+	Window.add_widget(app.build())
+	yield app
+	app.stop()
+	clear_window_and_event_loop()
+	EventLoop.close()
